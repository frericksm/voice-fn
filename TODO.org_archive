#    -*- mode: org -*-


Archived entries from file /Users/ovistoica/workspace/simulflow/TODO.org


* DONE Add support for configuration change.
CLOSED: [2025-01-28 Tue 09:12]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:12
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
Usecase:
We have an initial prompt and tools to use. We want to change it based on the custom parameters that are inputted throught the twilio websocket.
Example: On the twilio websocket, we can give custom parameters like script-name, overrides like user name, etc.

We can use the config-change frame to do this. And every processor takes what it cares about from it. However, you add very specific functionality to the twilio-in transport. So, what you need to do is add a custom-params->config argument.

#+begin_src clojure
:transport-in {:proc transport/twilio-transport-in
               :args {:transport/in-ch in
                      :twilio/handle-event (fn [event]
                                             {:out {:llm/context ".."
                                                    :llm/registered-tools [...]}})}
#+end_src

* DONE add core.async.flow support
CLOSED: [2025-01-28 Tue 08:51]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:12
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
:LOGBOOK:
CLOCK: [2025-01-25 Sat 16:35]--[2025-01-25 Sat 17:00] =>  0:25
CLOCK: [2025-01-25 Sat 15:18]--[2025-01-25 Sat 15:43] =>  0:25
CLOCK: [2025-01-25 Sat 11:14]--[2025-01-25 Sat 11:39] =>  0:25
CLOCK: [2025-01-25 Sat 09:50]--[2025-01-25 Sat 10:15] =>  0:25
:END:

* DONE Research a way to add clj-kondo schema type hints for frames in the macro
CLOSED: [2025-01-20 Lun 07:43]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:13
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
#+begin_src clojure
(defframe my-cool-frame
  "This is a cool frame"
  {:type :frame.cool/hello
   :schema [:map
            [:messages LLMContextMessages]
            [:tools LLMTools]]})
#+end_src

* DONE Add tools calls support                                          :mvp:
CLOSED: [2025-01-28 Tue 09:13] DEADLINE: <2025-01-17 Fri>
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:13
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
:LOGBOOK:
CLOCK: [2025-01-23 Thu 08:23]--[2025-01-23 Thu 08:48] =>  0:25
CLOCK: [2025-01-20 Lun 07:26]--[2025-01-20 Lun 07:51] =>  0:25
CLOCK: [2025-01-19 Dum 07:56]--[2025-01-19 Dum 08:21] =>  0:25
CLOCK: [2025-01-18 Sat 06:36]--[2025-01-18 Sat 06:41] =>  0:05
CLOCK: [2025-01-16 Thu 19:19]--[2025-01-16 Thu 19:44] =>  0:25
CLOCK: [2025-01-15 Wed 08:53]--[2025-01-15 Wed 09:18] =>  0:25
CLOCK: [2025-01-15 Wed 08:16]--[2025-01-15 Wed 08:41] =>  0:25
CLOCK: [2025-01-15 Wed 06:30]--[2025-01-15 Wed 06:55] =>  0:25
CLOCK: [2025-01-14 Tue 07:09]--[2025-01-14 Tue 07:34] =>  0:25
CLOCK: [2025-01-14 Tue 06:25]--[2025-01-14 Tue 06:50] =>  0:25
:END:

* DONE Create buffered output transport that sends chunks of 20ms at a 10ms interval
CLOSED: [2025-01-10 Vin 13:46]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:13
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_OLPATH: Add pipeline interruptions
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: mvp
:END:
:LOGBOOK:
CLOCK: [2025-01-09 Thu 15:51]--[2025-01-09 Thu 16:16] =>  0:25
CLOCK: [2025-01-09 Thu 15:19]--[2025-01-09 Thu 15:44] =>  0:25
CLOCK: [2025-01-09 Thu 14:45]--[2025-01-09 Thu 15:10] =>  0:25
CLOCK: [2025-01-09 Thu 13:58]--[2025-01-09 Thu 14:23] =>  0:25
CLOCK: [2025-01-09 Thu 08:29]--[2025-01-09 Thu 08:54] =>  0:25
CLOCK: [2025-01-09 Thu 07:46]--[2025-01-09 Thu 08:11] =>  0:25
CLOCK: [2025-01-09 Thu 07:00]--[2025-01-09 Thu 07:25] =>  0:25
CLOCK: [2025-01-09 Thu 06:29]--[2025-01-09 Thu 06:54] =>  0:25
CLOCK: [2025-01-08 Wed 10:45]--[2025-01-08 Wed 11:10] =>  0:25
CLOCK: [2025-01-08 Wed 08:29]--[2025-01-08 Wed 08:54] =>  0:25
:END:

* DONE Handle Start/Stop interruption frames in LLM and TTS and other assemblers
CLOSED: [2025-01-13 Mon 07:53]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:13
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_OLPATH: Add pipeline interruptions
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: mvp
:END:
:LOGBOOK:
CLOCK: [2025-01-10 Vin 16:29]--[2025-01-10 Vin 16:54] =>  0:25
CLOCK: [2025-01-10 Vin 14:15]--[2025-01-10 Vin 14:41] =>  0:26
CLOCK: [2025-01-10 Vin 13:46]--[2025-01-10 Vin 14:11] =>  0:25
CLOCK: [2025-01-08 Wed 07:01]--[2025-01-08 Wed 07:26] =>  0:25
CLOCK: [2025-01-07 Tue 07:17]--[2025-01-07 Tue 07:42] =>  0:25
CLOCK: [2025-01-07 Tue 06:20]--[2025-01-07 Tue 06:45] =>  0:25
CLOCK: [2025-01-06 Mon 17:07]--[2025-01-06 Mon 17:40] =>  0:33
CLOCK: [2025-01-06 Mon 16:36]--[2025-01-06 Mon 17:01] =>  0:25
:END:

* DONE Add assembler that takes in interim transcripts based on VAD
CLOSED: [2025-01-06 Mon 16:35]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:13
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_OLPATH: Add pipeline interruptions
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: mvp
:END:
:LOGBOOK:
CLOCK: [2025-01-06 Mon 12:28]--[2025-01-06 Mon 12:53] =>  0:25
CLOCK: [2025-01-06 Mon 07:37]--[2025-01-06 Mon 08:02] =>  0:25
CLOCK: [2025-01-05 Sun 09:21]--[2025-01-05 Sun 09:46] =>  0:25
CLOCK: [2025-01-05 Sun 08:18]--[2025-01-05 Sun 08:43] =>  0:25
CLOCK: [2025-01-04 Sat 15:22]--[2025-01-04 Sat 15:47] =>  0:25
CLOCK: [2025-01-04 Sat 11:04]--[2025-01-04 Sat 11:29] =>  0:25
CLOCK: [2025-01-04 Sat 07:14]--[2025-01-04 Sat 07:39] =>  0:25
:END:

* DONE Add VAD events from deepgram
CLOSED: [2025-01-03 Fri 19:41]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:13
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
:LOGBOOK:
CLOCK: [2025-01-03 Fri 16:25]--[2025-01-03 Fri 16:50] =>  0:25
CLOCK: [2025-01-03 Fri 15:36]--[2025-01-03 Fri 16:01] =>  0:25
CLOCK: [2025-01-03 Fri 11:01]--[2025-01-03 Fri 11:26] =>  0:25
:END:

* DONE Add schema validation with defaults
CLOSED: [2025-01-03 Fri 11:01]
:PROPERTIES:
:ARCHIVE_TIME: 2025-01-28 Tue 09:13
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
:LOGBOOK:
CLOCK: [2025-01-03 Fri 07:51]--[2025-01-03 Fri 08:16] =>  0:25
CLOCK: [2025-01-03 Fri 07:06]--[2025-01-03 Fri 07:31] =>  0:25
CLOCK: [2025-01-03 Fri 06:35]--[2025-01-03 Fri 07:00] =>  0:25
:END:

* DONE Change tool_call declaration to include the handler, to enable changing available tools on the fly
CLOSED: [2025-02-02 Sun 07:31]
:PROPERTIES:
:ARCHIVE_TIME: 2025-02-02 Sun 07:31
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_OLPATH: Implement diagram flows into vice-fn
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
If the function :handler returns a channel, the tool-caller will block until a result is put on the channel, optionally with a timeout
#+begin_src clojure
:functions [{:type :function
                  :function
                  {:name "record_party_size"
                   :handler (fn [{:keys [size]}] ...)
                   :description "Record the number of people in the party"
                   :parameters
                   {:type :object
                    :properties
                    {:size {:type :integer
                            :minimum 1
                            :maximum 12}}
                    :required [:size]}
                   :transition-to :get-time}}]
#+end_src

After this, basically we can just emit a =frame/llm-context= and that will update the current context. However the scenario manager needs to

* DONE Fix end the call function
CLOSED: [2025-02-05 Wed 08:34]
:PROPERTIES:
:ARCHIVE_TIME: 2025-02-05 Wed 08:34
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_TODO: DONE
:END:
:LOGBOOK:
CLOCK: [2025-01-29 Wed 18:03]--[2025-01-29 Wed 18:10] =>  0:07
:END:

* Differences between pipecat and simulflow
:PROPERTIES:
:ARCHIVE_TIME: 2025-08-23 Sat 09:58
:ARCHIVE_FILE: ~/workspace/simulflow/TODO.org
:ARCHIVE_OLPATH: Add pipeline interruptions
:ARCHIVE_CATEGORY: TODO
:ARCHIVE_ITAGS: mvp
:END:
1. (I think) simulflow TTS processors whould keep a =:pipeline/interrupted?=
   state because when the processor receives a =speak-frame=, it sends it on the
   websocket connection to the actual TTS provider that may send one or more
   events back that need to be accumulated to construct the full audio
   eequivalent of the text from the =speak-frame=. Therefore we keep the
   =pipeline/interrupted?= flag so when new data is received on the websocket
   the processor drops them.
2. We need a way to clear the "playback queue". Currently the playback queue is
   represented by the [[file:src/simulflow/transport/out.clj::audio-write-ch (a/chan 1024)\]][audio-write-channel]] defined. There is a [[file:src/simulflow/async.clj::(defn drain-channel!][drain-channel!]]
   function which will work but we need to introduce two channels to communicate
   with the [[file:src/simulflow/transport/out.clj::(vthread-loop \[\]][process running in a vthread]] that sends audio to out. One for
   commands to drain audio, and one on which to take audio from (the current
   existing one)
3. Pipecat uses a bidirectional queue system between processors:
Transport in <-> Transcriptor <-> Context Aggregator <-> LLM <-> TTS <-> a
